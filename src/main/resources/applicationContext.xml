<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">


	<!-- '객체를 만들기 위해' id 값이 없어도 아무런문제가 없다, 그러나 클라이언트가 요청시는 정해주어야한다. -->
	<!-- <bean class="polymorphism.SamsungTV"></bean> -->


	<!-- ApplicationContext 로딩하여 객체 생성하기 -->
	<!-- applicationContext만 수정해도 객체가 바뀔 수 있다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV"></bean> -->
	<!-- <bean id="tv" class="polymorphism.LgTV"></bean> -->


	<!-- import -->
	<!-- 하나의 파일에 설정하지않고 기능별로 여러 xml로 나누어 설정하며 이를 하나로 통합할때 import를 사용한다. -->


	<!-- init-method 속성 : bean객체를 생성한 후에 init-method 속성으로 지정된 메서드를 호출한다. -->
	<!-- destory-method 속성 : 객체를 삭제하기 직전에 호출될 임의의 메서드를 지정한다. -->
	<!-- lazy-init 속성 : true로 설정하면 미리 생성하지 않고 요청하는 시점에 생성해 메모리 관리에 효율적 -->
	<!-- scope 속성 : 기본값 싱글톤, 하나만 생성되어 운용되도록 한다. 싱글톤의 반대 prototype, 요청할때마다 여러개의 
		객체가 생긴다, 사용할 가능성은 적다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" 
		destroy-method="destoryMethod" lazy-init="true" scope="singleton"> </bean> -->


	<!-- index, 호출되는 생성자의 인자순서를 명확하게 지정 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV"></bean> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV"> 생성자 인젝션 <constructor-arg 
		index="0" ref="apple"></constructor-arg> <constructor-arg index="1" value="50000"></constructor-arg> 
		setter 인젝션 <property name="speaker" ref="apple"></property> <property name="price" 
		value="50000"></property> </bean> <bean id="sony" class="polymorphism.SonySpeaker"></bean> 
		<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->




	<!-- p 네임스페이스 이용하기 -->
	<!-- p:변수명-ref="객체이름/아이디" p:변수명="설정할값" -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="7777777" 
		/> <bean id="sony" class="polymorphism.SonySpeaker"></bean> <bean id="apple" 
		class="polymorphism.AppleSpeaker"></bean> -->




	<!-- collection 객체설정 -->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list> <value>서울시 강남구 역삼동</value> <value>서울시 성동구 행당동</value> <value>서울시 
				성동구 행당동</value> </list>

			set 중복저장하지않음
			<set value-type="java.lang.String"> <value>서울시 강남구 역삼동</value> <value>서울시 
				성동구 행당동</value> <value>서울시 성동구 행당동</value> </set>

			Map
			<map>
				<entry>
					<key>
						<value>고길동</value>
					</key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key>
						<value>마이콜</value>
					</key>
					<value>서울시 강남구 희곡동</value>
				</entry>
				</map>
				
				
				properties 매핑
				<props>
					<prop key="고길동">서울시 강남구 역삼동</prop>
					<prop key="마이콜">서울시 강남구 희곡동</prop>				
				</props>

		</property>
	</bean>
 -->
 
 <!-- 컴포넌트 스캔 설정
 설정파일에 클래스들을 일일이 bean엘리먼트로 등록할 필요가 없다. 어노테이션이 대신할것. -->
 <context:component-scan base-package="polymorphism"></context:component-scan>
<bean class="polymorphism.SonySpeaker"></bean>





	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" 
		destroy-method="destoryMethod" lazy-init="true" scope="singleton"> </bean> -->

	<!-- <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean"> 
		<property name="addressList"> <props> <prop key="고길동">서울시 강남구 역삼동</prop> 
		<prop key="마이콜">서울시 강서구 화곡동</prop> </props> </property> </bean> -->


	<!-- <bean id="sony" class="polymorphism.SonySpeaker"></bean> -->



</beans>
